"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkkolajAI_frontend"] = self["webpackChunkkolajAI_frontend"] || []).push([[946],{

/***/ 255:
/***/ (function(module, __unused_webpack___webpack_exports__, __webpack_require__) {

eval("{/* module decorator */ module = __webpack_require__.hmd(module);\n/**\n * Event Manager for KolajAI\n * Bu dosya event listener'ları yöneterek memory leak'leri önler\n */\n\nclass EventManager {\n  constructor() {\n    this.eventListeners = new Map();\n    this.abortControllers = new Map();\n    this.boundHandlers = new Map();\n\n    // Cleanup on page unload\n    this.setupUnloadHandler();\n  }\n\n  /**\n   * Add event listener with automatic cleanup tracking\n   * @param {Element|Window|Document} target - Event target\n   * @param {string} type - Event type\n   * @param {Function} handler - Event handler\n   * @param {Object} options - Event options\n   * @returns {string} - Event ID for manual removal\n   */\n  addEventListener(target, type, handler, options = {}) {\n    const eventId = this.generateEventId();\n\n    // Create abort controller for this event\n    const controller = new AbortController();\n\n    // Add abort signal to options\n    const eventOptions = {\n      ...options,\n      signal: controller.signal\n    };\n\n    // Store event info for cleanup\n    const eventInfo = {\n      target,\n      type,\n      handler,\n      options: eventOptions,\n      controller\n    };\n    this.eventListeners.set(eventId, eventInfo);\n    this.abortControllers.set(eventId, controller);\n\n    // Add the actual event listener\n    target.addEventListener(type, handler, eventOptions);\n    return eventId;\n  }\n\n  /**\n   * Remove specific event listener\n   * @param {string} eventId - Event ID returned from addEventListener\n   */\n  removeEventListener(eventId) {\n    const controller = this.abortControllers.get(eventId);\n    if (controller) {\n      controller.abort();\n      this.abortControllers.delete(eventId);\n      this.eventListeners.delete(eventId);\n    }\n  }\n\n  /**\n   * Remove all event listeners for a specific target\n   * @param {Element|Window|Document} target - Event target\n   */\n  removeAllEventListeners(target) {\n    const toRemove = [];\n    for (const [eventId, eventInfo] of this.eventListeners) {\n      if (eventInfo.target === target) {\n        toRemove.push(eventId);\n      }\n    }\n    toRemove.forEach(eventId => this.removeEventListener(eventId));\n  }\n\n  /**\n   * Remove all event listeners of a specific type\n   * @param {string} type - Event type\n   */\n  removeEventListenersByType(type) {\n    const toRemove = [];\n    for (const [eventId, eventInfo] of this.eventListeners) {\n      if (eventInfo.type === type) {\n        toRemove.push(eventId);\n      }\n    }\n    toRemove.forEach(eventId => this.removeEventListener(eventId));\n  }\n\n  /**\n   * Add delegated event listener (more memory efficient for dynamic content)\n   * @param {Element} container - Container element\n   * @param {string} selector - CSS selector for target elements\n   * @param {string} type - Event type\n   * @param {Function} handler - Event handler\n   * @param {Object} options - Event options\n   * @returns {string} - Event ID\n   */\n  addDelegatedEventListener(container, selector, type, handler, options = {}) {\n    const delegatedHandler = event => {\n      const target = event.target.closest(selector);\n      if (target && container.contains(target)) {\n        // Call handler with proper context\n        handler.call(target, event);\n      }\n    };\n    return this.addEventListener(container, type, delegatedHandler, options);\n  }\n\n  /**\n   * Add throttled event listener\n   * @param {Element|Window|Document} target - Event target\n   * @param {string} type - Event type\n   * @param {Function} handler - Event handler\n   * @param {number} delay - Throttle delay in ms\n   * @param {Object} options - Event options\n   * @returns {string} - Event ID\n   */\n  addThrottledEventListener(target, type, handler, delay = 100, options = {}) {\n    const throttledHandler = this.throttle(handler, delay);\n    return this.addEventListener(target, type, throttledHandler, options);\n  }\n\n  /**\n   * Add debounced event listener\n   * @param {Element|Window|Document} target - Event target\n   * @param {string} type - Event type\n   * @param {Function} handler - Event handler\n   * @param {number} delay - Debounce delay in ms\n   * @param {Object} options - Event options\n   * @returns {string} - Event ID\n   */\n  addDebouncedEventListener(target, type, handler, delay = 300, options = {}) {\n    const debouncedHandler = this.debounce(handler, delay);\n    return this.addEventListener(target, type, debouncedHandler, options);\n  }\n\n  /**\n   * Add one-time event listener that auto-removes after first trigger\n   * @param {Element|Window|Document} target - Event target\n   * @param {string} type - Event type\n   * @param {Function} handler - Event handler\n   * @param {Object} options - Event options\n   * @returns {string} - Event ID\n   */\n  addOneTimeEventListener(target, type, handler, options = {}) {\n    const eventId = this.generateEventId();\n    const oneTimeHandler = event => {\n      handler(event);\n      this.removeEventListener(eventId);\n    };\n    return this.addEventListener(target, type, oneTimeHandler, options);\n  }\n\n  /**\n   * Throttle function\n   */\n  throttle(func, delay) {\n    let timeoutId;\n    let lastExecTime = 0;\n    return function (...args) {\n      const currentTime = Date.now();\n      if (currentTime - lastExecTime > delay) {\n        func.apply(this, args);\n        lastExecTime = currentTime;\n      } else {\n        clearTimeout(timeoutId);\n        timeoutId = setTimeout(() => {\n          func.apply(this, args);\n          lastExecTime = Date.now();\n        }, delay - (currentTime - lastExecTime));\n      }\n    };\n  }\n\n  /**\n   * Debounce function\n   */\n  debounce(func, delay) {\n    let timeoutId;\n    return function (...args) {\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(() => func.apply(this, args), delay);\n    };\n  }\n\n  /**\n   * Generate unique event ID\n   */\n  generateEventId() {\n    return `event_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Setup page unload handler for cleanup\n   */\n  setupUnloadHandler() {\n    const cleanup = () => {\n      this.cleanup();\n    };\n\n    // Use multiple events to ensure cleanup\n    window.addEventListener('beforeunload', cleanup);\n    window.addEventListener('unload', cleanup);\n    window.addEventListener('pagehide', cleanup);\n\n    // For SPAs, also listen to custom events\n    window.addEventListener('app:cleanup', cleanup);\n  }\n\n  /**\n   * Manual cleanup - removes all event listeners\n   */\n  cleanup() {\n    // Abort all controllers\n    for (const controller of this.abortControllers.values()) {\n      try {\n        controller.abort();\n      } catch (error) {\n        // Ignore errors during cleanup\n      }\n    }\n\n    // Clear all maps\n    this.eventListeners.clear();\n    this.abortControllers.clear();\n    this.boundHandlers.clear();\n    if (window.logger) {\n      window.logger.debug('EventManager: All event listeners cleaned up');\n    }\n  }\n\n  /**\n   * Get statistics about registered events\n   */\n  getStats() {\n    const stats = {\n      totalEvents: this.eventListeners.size,\n      eventsByType: {},\n      eventsByTarget: {}\n    };\n    for (const eventInfo of this.eventListeners.values()) {\n      // Count by type\n      stats.eventsByType[eventInfo.type] = (stats.eventsByType[eventInfo.type] || 0) + 1;\n\n      // Count by target type\n      const targetType = eventInfo.target.constructor.name;\n      stats.eventsByTarget[targetType] = (stats.eventsByTarget[targetType] || 0) + 1;\n    }\n    return stats;\n  }\n\n  /**\n   * Check for potential memory leaks\n   */\n  checkForLeaks() {\n    const stats = this.getStats();\n    const warnings = [];\n    if (stats.totalEvents > 1000) {\n      warnings.push(`High number of event listeners: ${stats.totalEvents}`);\n    }\n\n    // Check for excessive listeners of same type\n    for (const [type, count] of Object.entries(stats.eventsByType)) {\n      if (count > 100) {\n        warnings.push(`Excessive ${type} listeners: ${count}`);\n      }\n    }\n    if (warnings.length > 0 && window.logger) {\n      window.logger.warn('EventManager: Potential memory leaks detected:', warnings);\n    }\n    return warnings;\n  }\n}\n\n// Create global event manager instance\nconst eventManager = new EventManager();\n\n// Export for global access\nif (typeof window !== 'undefined') {\n  window.eventManager = eventManager;\n\n  // Provide convenient global functions\n  window.addEvent = (target, type, handler, options) => eventManager.addEventListener(target, type, handler, options);\n  window.removeEvent = eventId => eventManager.removeEventListener(eventId);\n  window.addDelegatedEvent = (container, selector, type, handler, options) => eventManager.addDelegatedEventListener(container, selector, type, handler, options);\n}\n\n// Export for module systems\nif ( true && module.exports) {\n  module.exports = EventManager;\n}\n/* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = ((/* unused pure expression or super */ null && (EventManager)));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///255\n\n}");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ var __webpack_exports__ = (__webpack_exec__(255));
/******/ }
]);