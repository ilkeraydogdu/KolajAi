"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkkolajAI_frontend"] = self["webpackChunkkolajAI_frontend"] || []).push([[743],{

/***/ 729:
/***/ (function(module, __unused_webpack___webpack_exports__, __webpack_require__) {

eval("{/* module decorator */ module = __webpack_require__.hmd(module);\n/**\n * Logger Utility for KolajAI\n * Bu dosya production-safe logging sistemi saÄŸlar\n */\n\nclass Logger {\n  constructor() {\n    // Determine environment\n    this.isDevelopment = this.detectEnvironment();\n    this.logLevel = this.getLogLevel();\n  }\n  detectEnvironment() {\n    // Check various indicators for development environment\n    if (typeof process !== 'undefined' && process.env && \"production\") {\n      return \"production\" === 'development';\n    }\n\n    // Check for localhost or development domains\n    if (typeof window !== 'undefined') {\n      const hostname = window.location.hostname;\n      return hostname === 'localhost' || hostname === '127.0.0.1' || hostname.includes('.local') || hostname.includes('dev.') || hostname.includes('staging.');\n    }\n\n    // Default to production for safety\n    return false;\n  }\n  getLogLevel() {\n    if (typeof localStorage !== 'undefined') {\n      const level = localStorage.getItem('kolajAI_log_level');\n      if (level) return level;\n    }\n    return this.isDevelopment ? 'debug' : 'error';\n  }\n  setLogLevel(level) {\n    this.logLevel = level;\n    if (typeof localStorage !== 'undefined') {\n      localStorage.setItem('kolajAI_log_level', level);\n    }\n  }\n  shouldLog(level) {\n    const levels = {\n      'debug': 0,\n      'info': 1,\n      'warn': 2,\n      'error': 3\n    };\n    return levels[level] >= levels[this.logLevel];\n  }\n  debug(...args) {\n    if (this.shouldLog('debug')) {\n      window.logger && window.logger.debug('[DEBUG]', ...args);\n    }\n  }\n  info(...args) {\n    if (this.shouldLog('info')) {\n      console.info('[INFO]', ...args);\n    }\n  }\n  warn(...args) {\n    if (this.shouldLog('warn')) {\n      console.warn('[WARN]', ...args);\n    }\n  }\n  error(...args) {\n    if (this.shouldLog('error')) {\n      console.error('[ERROR]', ...args);\n    }\n  }\n\n  // Special method for AJAX responses (only in development)\n  ajax(message, data) {\n    if (this.isDevelopment) {\n      window.logger && window.logger.debug('[AJAX]', message, data);\n    }\n  }\n\n  // Special method for form operations (only in development)\n  form(message, data) {\n    if (this.isDevelopment) {\n      window.logger && window.logger.debug('[FORM]', message, data);\n    }\n  }\n\n  // Special method for authentication operations (only in development)\n  auth(message, data) {\n    if (this.isDevelopment) {\n      window.logger && window.logger.debug('[AUTH]', message, data);\n    }\n  }\n\n  // Method to log user actions for analytics (always enabled but sanitized)\n  userAction(action, details = {}) {\n    // Sanitize sensitive data\n    const sanitizedDetails = this.sanitizeData(details);\n\n    // Send to analytics service if available\n    if (typeof window !== 'undefined' && window.analytics) {\n      window.analytics.track(action, sanitizedDetails);\n    }\n\n    // Log in development\n    if (this.isDevelopment) {\n      window.logger && window.logger.debug('[USER_ACTION]', action, sanitizedDetails);\n    }\n  }\n  sanitizeData(data) {\n    const sensitiveKeys = ['password', 'token', 'secret', 'key', 'auth'];\n    const sanitized = {};\n    for (const [key, value] of Object.entries(data)) {\n      const lowerKey = key.toLowerCase();\n      const isSensitive = sensitiveKeys.some(sensitive => lowerKey.includes(sensitive));\n      if (isSensitive) {\n        sanitized[key] = '[REDACTED]';\n      } else if (typeof value === 'object' && value !== null) {\n        sanitized[key] = this.sanitizeData(value);\n      } else {\n        sanitized[key] = value;\n      }\n    }\n    return sanitized;\n  }\n\n  // Performance logging\n  time(label) {\n    if (this.isDevelopment) {\n      console.time(label);\n    }\n  }\n  timeEnd(label) {\n    if (this.isDevelopment) {\n      console.timeEnd(label);\n    }\n  }\n\n  // Group logging for better organization\n  group(label) {\n    if (this.isDevelopment) {\n      console.group(label);\n    }\n  }\n  groupEnd() {\n    if (this.isDevelopment) {\n      console.groupEnd();\n    }\n  }\n}\n\n// Create global logger instance\nconst logger = new Logger();\n\n// Export for global access\nif (typeof window !== 'undefined') {\n  window.logger = logger;\n\n  // Backward compatibility - replace console.log in development\n  if (logger.isDevelopment) {\n    // Store original console methods\n    window._originalConsole = {\n      log: console.log,\n      info: console.info,\n      warn: console.warn,\n      error: console.error\n    };\n  }\n}\n\n// Export for module systems\nif ( true && module.exports) {\n  module.exports = Logger;\n}\n/* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = ((/* unused pure expression or super */ null && (Logger)));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzI5LmpzIiwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBS0E7O0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9rb2xhakFJLWZyb250ZW5kLy4vd2ViL3N0YXRpYy9qcy9sb2dnZXIuanM/NDM3MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIExvZ2dlciBVdGlsaXR5IGZvciBLb2xhakFJXG4gKiBCdSBkb3N5YSBwcm9kdWN0aW9uLXNhZmUgbG9nZ2luZyBzaXN0ZW1pIHNhxJ9sYXJcbiAqL1xuXG5jbGFzcyBMb2dnZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvLyBEZXRlcm1pbmUgZW52aXJvbm1lbnRcbiAgICB0aGlzLmlzRGV2ZWxvcG1lbnQgPSB0aGlzLmRldGVjdEVudmlyb25tZW50KCk7XG4gICAgdGhpcy5sb2dMZXZlbCA9IHRoaXMuZ2V0TG9nTGV2ZWwoKTtcbiAgfVxuXG4gIGRldGVjdEVudmlyb25tZW50KCkge1xuICAgIC8vIENoZWNrIHZhcmlvdXMgaW5kaWNhdG9ycyBmb3IgZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRcbiAgICBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MuZW52ICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICByZXR1cm4gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCc7XG4gICAgfVxuICAgIFxuICAgIC8vIENoZWNrIGZvciBsb2NhbGhvc3Qgb3IgZGV2ZWxvcG1lbnQgZG9tYWluc1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc3QgaG9zdG5hbWUgPSB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWU7XG4gICAgICByZXR1cm4gaG9zdG5hbWUgPT09ICdsb2NhbGhvc3QnIHx8IFxuICAgICAgICAgICAgIGhvc3RuYW1lID09PSAnMTI3LjAuMC4xJyB8fCBcbiAgICAgICAgICAgICBob3N0bmFtZS5pbmNsdWRlcygnLmxvY2FsJykgfHxcbiAgICAgICAgICAgICBob3N0bmFtZS5pbmNsdWRlcygnZGV2LicpIHx8XG4gICAgICAgICAgICAgaG9zdG5hbWUuaW5jbHVkZXMoJ3N0YWdpbmcuJyk7XG4gICAgfVxuICAgIFxuICAgIC8vIERlZmF1bHQgdG8gcHJvZHVjdGlvbiBmb3Igc2FmZXR5XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZ2V0TG9nTGV2ZWwoKSB7XG4gICAgaWYgKHR5cGVvZiBsb2NhbFN0b3JhZ2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zdCBsZXZlbCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdrb2xhakFJX2xvZ19sZXZlbCcpO1xuICAgICAgaWYgKGxldmVsKSByZXR1cm4gbGV2ZWw7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiB0aGlzLmlzRGV2ZWxvcG1lbnQgPyAnZGVidWcnIDogJ2Vycm9yJztcbiAgfVxuXG4gIHNldExvZ0xldmVsKGxldmVsKSB7XG4gICAgdGhpcy5sb2dMZXZlbCA9IGxldmVsO1xuICAgIGlmICh0eXBlb2YgbG9jYWxTdG9yYWdlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2tvbGFqQUlfbG9nX2xldmVsJywgbGV2ZWwpO1xuICAgIH1cbiAgfVxuXG4gIHNob3VsZExvZyhsZXZlbCkge1xuICAgIGNvbnN0IGxldmVscyA9IHtcbiAgICAgICdkZWJ1Zyc6IDAsXG4gICAgICAnaW5mbyc6IDEsXG4gICAgICAnd2Fybic6IDIsXG4gICAgICAnZXJyb3InOiAzXG4gICAgfTtcbiAgICBcbiAgICByZXR1cm4gbGV2ZWxzW2xldmVsXSA+PSBsZXZlbHNbdGhpcy5sb2dMZXZlbF07XG4gIH1cblxuICBkZWJ1ZyguLi5hcmdzKSB7XG4gICAgaWYgKHRoaXMuc2hvdWxkTG9nKCdkZWJ1ZycpKSB7XG4gICAgICB3aW5kb3cubG9nZ2VyICYmIHdpbmRvdy5sb2dnZXIuZGVidWcoJ1tERUJVR10nLCAuLi5hcmdzKTtcbiAgICB9XG4gIH1cblxuICBpbmZvKC4uLmFyZ3MpIHtcbiAgICBpZiAodGhpcy5zaG91bGRMb2coJ2luZm8nKSkge1xuICAgICAgY29uc29sZS5pbmZvKCdbSU5GT10nLCAuLi5hcmdzKTtcbiAgICB9XG4gIH1cblxuICB3YXJuKC4uLmFyZ3MpIHtcbiAgICBpZiAodGhpcy5zaG91bGRMb2coJ3dhcm4nKSkge1xuICAgICAgY29uc29sZS53YXJuKCdbV0FSTl0nLCAuLi5hcmdzKTtcbiAgICB9XG4gIH1cblxuICBlcnJvciguLi5hcmdzKSB7XG4gICAgaWYgKHRoaXMuc2hvdWxkTG9nKCdlcnJvcicpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdbRVJST1JdJywgLi4uYXJncyk7XG4gICAgfVxuICB9XG5cbiAgLy8gU3BlY2lhbCBtZXRob2QgZm9yIEFKQVggcmVzcG9uc2VzIChvbmx5IGluIGRldmVsb3BtZW50KVxuICBhamF4KG1lc3NhZ2UsIGRhdGEpIHtcbiAgICBpZiAodGhpcy5pc0RldmVsb3BtZW50KSB7XG4gICAgICB3aW5kb3cubG9nZ2VyICYmIHdpbmRvdy5sb2dnZXIuZGVidWcoJ1tBSkFYXScsIG1lc3NhZ2UsIGRhdGEpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFNwZWNpYWwgbWV0aG9kIGZvciBmb3JtIG9wZXJhdGlvbnMgKG9ubHkgaW4gZGV2ZWxvcG1lbnQpXG4gIGZvcm0obWVzc2FnZSwgZGF0YSkge1xuICAgIGlmICh0aGlzLmlzRGV2ZWxvcG1lbnQpIHtcbiAgICAgIHdpbmRvdy5sb2dnZXIgJiYgd2luZG93LmxvZ2dlci5kZWJ1ZygnW0ZPUk1dJywgbWVzc2FnZSwgZGF0YSk7XG4gICAgfVxuICB9XG5cbiAgLy8gU3BlY2lhbCBtZXRob2QgZm9yIGF1dGhlbnRpY2F0aW9uIG9wZXJhdGlvbnMgKG9ubHkgaW4gZGV2ZWxvcG1lbnQpXG4gIGF1dGgobWVzc2FnZSwgZGF0YSkge1xuICAgIGlmICh0aGlzLmlzRGV2ZWxvcG1lbnQpIHtcbiAgICAgIHdpbmRvdy5sb2dnZXIgJiYgd2luZG93LmxvZ2dlci5kZWJ1ZygnW0FVVEhdJywgbWVzc2FnZSwgZGF0YSk7XG4gICAgfVxuICB9XG5cbiAgLy8gTWV0aG9kIHRvIGxvZyB1c2VyIGFjdGlvbnMgZm9yIGFuYWx5dGljcyAoYWx3YXlzIGVuYWJsZWQgYnV0IHNhbml0aXplZClcbiAgdXNlckFjdGlvbihhY3Rpb24sIGRldGFpbHMgPSB7fSkge1xuICAgIC8vIFNhbml0aXplIHNlbnNpdGl2ZSBkYXRhXG4gICAgY29uc3Qgc2FuaXRpemVkRGV0YWlscyA9IHRoaXMuc2FuaXRpemVEYXRhKGRldGFpbHMpO1xuICAgIFxuICAgIC8vIFNlbmQgdG8gYW5hbHl0aWNzIHNlcnZpY2UgaWYgYXZhaWxhYmxlXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5hbmFseXRpY3MpIHtcbiAgICAgIHdpbmRvdy5hbmFseXRpY3MudHJhY2soYWN0aW9uLCBzYW5pdGl6ZWREZXRhaWxzKTtcbiAgICB9XG4gICAgXG4gICAgLy8gTG9nIGluIGRldmVsb3BtZW50XG4gICAgaWYgKHRoaXMuaXNEZXZlbG9wbWVudCkge1xuICAgICAgd2luZG93LmxvZ2dlciAmJiB3aW5kb3cubG9nZ2VyLmRlYnVnKCdbVVNFUl9BQ1RJT05dJywgYWN0aW9uLCBzYW5pdGl6ZWREZXRhaWxzKTtcbiAgICB9XG4gIH1cblxuICBzYW5pdGl6ZURhdGEoZGF0YSkge1xuICAgIGNvbnN0IHNlbnNpdGl2ZUtleXMgPSBbJ3Bhc3N3b3JkJywgJ3Rva2VuJywgJ3NlY3JldCcsICdrZXknLCAnYXV0aCddO1xuICAgIGNvbnN0IHNhbml0aXplZCA9IHt9O1xuICAgIFxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGRhdGEpKSB7XG4gICAgICBjb25zdCBsb3dlcktleSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgY29uc3QgaXNTZW5zaXRpdmUgPSBzZW5zaXRpdmVLZXlzLnNvbWUoc2Vuc2l0aXZlID0+IGxvd2VyS2V5LmluY2x1ZGVzKHNlbnNpdGl2ZSkpO1xuICAgICAgXG4gICAgICBpZiAoaXNTZW5zaXRpdmUpIHtcbiAgICAgICAgc2FuaXRpemVkW2tleV0gPSAnW1JFREFDVEVEXSc7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgc2FuaXRpemVkW2tleV0gPSB0aGlzLnNhbml0aXplRGF0YSh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzYW5pdGl6ZWRba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gc2FuaXRpemVkO1xuICB9XG5cbiAgLy8gUGVyZm9ybWFuY2UgbG9nZ2luZ1xuICB0aW1lKGxhYmVsKSB7XG4gICAgaWYgKHRoaXMuaXNEZXZlbG9wbWVudCkge1xuICAgICAgY29uc29sZS50aW1lKGxhYmVsKTtcbiAgICB9XG4gIH1cblxuICB0aW1lRW5kKGxhYmVsKSB7XG4gICAgaWYgKHRoaXMuaXNEZXZlbG9wbWVudCkge1xuICAgICAgY29uc29sZS50aW1lRW5kKGxhYmVsKTtcbiAgICB9XG4gIH1cblxuICAvLyBHcm91cCBsb2dnaW5nIGZvciBiZXR0ZXIgb3JnYW5pemF0aW9uXG4gIGdyb3VwKGxhYmVsKSB7XG4gICAgaWYgKHRoaXMuaXNEZXZlbG9wbWVudCkge1xuICAgICAgY29uc29sZS5ncm91cChsYWJlbCk7XG4gICAgfVxuICB9XG5cbiAgZ3JvdXBFbmQoKSB7XG4gICAgaWYgKHRoaXMuaXNEZXZlbG9wbWVudCkge1xuICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBDcmVhdGUgZ2xvYmFsIGxvZ2dlciBpbnN0YW5jZVxuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcigpO1xuXG4vLyBFeHBvcnQgZm9yIGdsb2JhbCBhY2Nlc3NcbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICB3aW5kb3cubG9nZ2VyID0gbG9nZ2VyO1xuICBcbiAgLy8gQmFja3dhcmQgY29tcGF0aWJpbGl0eSAtIHJlcGxhY2UgY29uc29sZS5sb2cgaW4gZGV2ZWxvcG1lbnRcbiAgaWYgKGxvZ2dlci5pc0RldmVsb3BtZW50KSB7XG4gICAgLy8gU3RvcmUgb3JpZ2luYWwgY29uc29sZSBtZXRob2RzXG4gICAgd2luZG93Ll9vcmlnaW5hbENvbnNvbGUgPSB7XG4gICAgICBsb2c6IGNvbnNvbGUubG9nLFxuICAgICAgaW5mbzogY29uc29sZS5pbmZvLFxuICAgICAgd2FybjogY29uc29sZS53YXJuLFxuICAgICAgZXJyb3I6IGNvbnNvbGUuZXJyb3JcbiAgICB9O1xuICB9XG59XG5cbi8vIEV4cG9ydCBmb3IgbW9kdWxlIHN5c3RlbXNcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICBtb2R1bGUuZXhwb3J0cyA9IExvZ2dlcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgTG9nZ2VyOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///729\n\n}");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ var __webpack_exports__ = (__webpack_exec__(729));
/******/ }
]);