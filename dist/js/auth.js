/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkkolajAI_frontend"] = self["webpackChunkkolajAI_frontend"] || []).push([[933],{

/***/ 367:
/***/ (function() {

eval("{/**\n * KolajAI Auth Module\n * Bu modül kimlik doğrulama ile ilgili tüm JavaScript işlevlerini içerir\n */\n\n// Uygulama genelinde kullanılacak yardımcı fonksiyonlar\nconst AuthHelpers = {\n  // Şifre görünürlüğünü değiştiren fonksiyon\n  togglePasswordVisibility: function (containerId) {\n    const passwordInput = $(containerId + ' input');\n    const icon = $(containerId + ' i');\n    if (passwordInput.attr('type') === 'password') {\n      passwordInput.attr('type', 'text');\n      icon.removeClass('bi-eye-slash-fill').addClass('bi-eye-fill');\n    } else {\n      passwordInput.attr('type', 'password');\n      icon.removeClass('bi-eye-fill').addClass('bi-eye-slash-fill');\n    }\n  },\n  // Bildirim gösterme fonksiyonu\n  showNotification: function (type, title, message) {\n    // Bildirim tiplerine göre renkler\n    const typeClasses = {\n      'success': 'bg-success text-white',\n      'error': 'bg-danger text-white',\n      'warning': 'bg-warning',\n      'info': 'bg-info text-white'\n    };\n\n    // Toast elementini oluştur\n    const toastId = 'toast-' + Date.now();\n    const toastHtml = `\n      <div id=\"${toastId}\" class=\"toast ${typeClasses[type] || ''}\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\">\n        <div class=\"toast-header\">\n          <strong class=\"me-auto\">${title}</strong>\n          <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"toast\" aria-label=\"Close\"></button>\n        </div>\n        <div class=\"toast-body\">\n          ${message}\n        </div>\n      </div>\n    `;\n\n    // Toast container'ı kontrol et veya oluştur\n    let toastContainer = $('.toast-container');\n    if (toastContainer.length === 0) {\n      toastContainer = $('<div class=\"toast-container position-fixed top-0 end-0 p-3\"></div>');\n      $('body').append(toastContainer);\n    }\n\n    // Toast'u ekle ve göster\n    const toastElement = $(toastHtml);\n    toastContainer.append(toastElement);\n    const toast = new bootstrap.Toast(toastElement[0], {\n      autohide: true,\n      delay: 5000\n    });\n    toast.show();\n\n    // 5 saniye sonra otomatik kaldır\n    setTimeout(function () {\n      toastElement.remove();\n    }, 5000);\n  },\n  // AJAX isteği gönderme fonksiyonu\n  sendAjaxRequest: function (url, method, data, successCallback, errorCallback) {\n    // Use logger instead of console.log\n    if (window.logger) {\n      window.logger.ajax(\"Sending AJAX request to:\", {\n        url,\n        data\n      });\n    }\n    $.ajax({\n      url: url,\n      type: method,\n      data: data,\n      headers: {\n        'X-Requested-With': 'XMLHttpRequest',\n        'Accept': 'application/json'\n      },\n      crossDomain: false,\n      // Restrict to same origin for security\n      xhrFields: {\n        withCredentials: true // Include credentials for proper authentication\n      },\n      success: function (response) {\n        if (window.logger) {\n          window.logger.ajax(\"AJAX response:\", response);\n        }\n        if (successCallback) {\n          successCallback(response);\n        }\n      },\n      error: function (xhr, status, error) {\n        console.error(\"AJAX hatası:\", {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          responseText: xhr.responseText,\n          error: error\n        });\n        if (errorCallback) {\n          errorCallback({\n            status: xhr.status,\n            statusText: xhr.statusText,\n            responseText: xhr.responseText,\n            error: error\n          });\n        }\n      }\n    });\n  }\n};\n\n// Şifre sıfırlama sayfası işlevleri\nconst ResetPassword = {\n  // Değişkenler\n  tempPasswordVerified: false,\n  verificationInProgress: false,\n  init: function () {\n    window.logger && window.logger.debug(\"Reset password page loaded\");\n\n    // DOM elementlerini seç\n    this.tempPasswordInput = $('#inputTempPassword');\n    this.newPasswordSection = $('#newPasswordSection');\n    this.confirmPasswordSection = $('#confirmPasswordSection');\n    this.submitButtonSection = $('#submitButtonSection');\n    this.tempPasswordError = $('#tempPasswordError');\n    this.resetPasswordForm = $('#resetPasswordForm');\n\n    // E-posta parametresini logla\n    const email = $('input[name=\"email\"]').val();\n    window.logger && window.logger.debug(\"Email parameter:\", email);\n\n    // URL'deki parametreleri temizle\n    if (window.history.replaceState) {\n      window.history.replaceState(null, null, window.location.pathname);\n    }\n\n    // Başarı mesajını göster\n    AuthHelpers.showNotification('success', 'Kayıt Başarılı', 'Hesabınız başarıyla oluşturuldu. Size e-posta ile gönderilen geçici şifre ile hemen yeni bir şifre belirleyebilirsiniz.');\n\n    // Event listener'ları ekle\n    this.setupEventListeners();\n  },\n  setupEventListeners: function () {\n    const self = this;\n\n    // Şifre alanında değişiklik olduğunda otomatik doğrulama\n    this.tempPasswordInput.on('input', function () {\n      self.verifyTempPassword($(this).val());\n    });\n\n    // Şifre göster/gizle fonksiyonları\n    $(\"#show_hide_temp_password a\").on('click', function (event) {\n      event.preventDefault();\n      AuthHelpers.togglePasswordVisibility('#show_hide_temp_password');\n    });\n    $(\"#show_hide_password a\").on('click', function (event) {\n      event.preventDefault();\n      AuthHelpers.togglePasswordVisibility('#show_hide_password');\n    });\n    $(\"#show_hide_password2 a\").on('click', function (event) {\n      event.preventDefault();\n      AuthHelpers.togglePasswordVisibility('#show_hide_password2');\n    });\n\n    // Form gönderimi\n    this.resetPasswordForm.on('submit', function (e) {\n      e.preventDefault(); // Form gönderimini engelle\n      window.logger && window.logger.debug(\"Form submit event triggered\");\n      if (!self.tempPasswordVerified) {\n        console.error(\"Geçici şifre doğrulanmadı, form gönderimi engellendi\");\n        self.tempPasswordError.text('Lütfen önce geçici şifreyi doğrulayın');\n        AuthHelpers.showNotification('warning', 'Uyarı', 'Lütfen önce geçici şifreyi doğrulayın');\n        return false;\n      }\n\n      // Şifre ve şifre onayı eşleşiyor mu kontrol et\n      const password = $('#inputChoosePassword').val();\n      const confirmPassword = $('#inputChoosePassword2').val();\n      const email = $('input[name=\"email\"]').val();\n      if (password !== confirmPassword) {\n        $('#passwordError').text('Şifreler eşleşmiyor');\n        $('#inputChoosePassword2').addClass('is-invalid');\n        AuthHelpers.showNotification('error', 'Hata', 'Şifreler eşleşmiyor');\n        return false;\n      }\n\n      // Şifre uzunluğu kontrolü\n      if (password.length < 6) {\n        $('#passwordError').text('Şifre en az 6 karakter olmalıdır');\n        $('#inputChoosePassword').addClass('is-invalid');\n        AuthHelpers.showNotification('error', 'Hata', 'Şifre en az 6 karakter olmalıdır');\n        return false;\n      }\n      window.logger && window.logger.debug(\"Şifre değiştirme işlemi başlatılıyor...\");\n      window.logger && window.logger.debug(\"Form verileri:\", {\n        email: email,\n        password: password,\n        password_confirm: confirmPassword\n      });\n\n      // Butonun durumunu güncelle\n      const submitButton = $('#submitButtonSection button');\n      const originalText = submitButton.text();\n      submitButton.prop('disabled', true).html('<span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span> İşleniyor...');\n\n      // AJAX ile şifre değiştirme isteği gönder\n      $.ajax({\n        url: '/reset-password',\n        type: 'POST',\n        contentType: 'application/json',\n        dataType: 'json',\n        data: JSON.stringify({\n          email: email,\n          password: password,\n          password_confirm: confirmPassword\n        }),\n        headers: {\n          'X-Requested-With': 'XMLHttpRequest',\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        beforeSend: function (xhr) {\n          // CORS için OPTIONS isteğine izin ver\n          xhr.setRequestHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');\n          xhr.setRequestHeader('Access-Control-Allow-Headers', 'Content-Type, X-Requested-With');\n        },\n        success: function (response) {\n          window.logger && window.logger.debug(\"Şifre değiştirme başarılı:\", response);\n          // Başarılı mesajı göster\n          AuthHelpers.showNotification('success', 'Başarılı', 'Şifreniz başarıyla değiştirildi');\n          // Login sayfasına yönlendir\n          setTimeout(function () {\n            window.location.href = \"/login?messageType=success&messageTitle=Başarılı&messageText=Şifreniz+başarıyla+değiştirildi.+Yeni+şifrenizle+giriş+yapabilirsiniz.\";\n          }, 2000);\n        },\n        error: function (xhr, status, error) {\n          var _xhr$responseJSON;\n          console.error(\"Şifre değiştirme hatası:\", error);\n          // Hatayı göster\n          submitButton.prop('disabled', false).text(originalText);\n          AuthHelpers.showNotification('error', 'Hata', ((_xhr$responseJSON = xhr.responseJSON) === null || _xhr$responseJSON === void 0 ? void 0 : _xhr$responseJSON.error) || 'Şifre değiştirme işlemi başarısız oldu.');\n        }\n      });\n    });\n  },\n  verifyTempPassword: function (tempPassword) {\n    const self = this;\n    if (tempPassword.length < 3) {\n      return;\n    }\n    if (this.verificationInProgress) {\n      return;\n    }\n    this.verificationInProgress = true;\n    window.logger && window.logger.debug(\"Temp password changed, length:\", tempPassword.length);\n\n    // Doğrulama için AJAX isteği\n    AuthHelpers.sendAjaxRequest('/api/verify-temp-password', 'POST', {\n      email: $('input[name=\"email\"]').val(),\n      temp_password: tempPassword\n    }, function (response) {\n      self.verificationInProgress = false;\n      window.logger && window.logger.debug(\"AJAX başarılı:\", response);\n      if (response.success) {\n        self.tempPasswordVerified = true;\n        self.tempPasswordInput.removeClass('is-invalid').addClass('is-valid');\n        self.tempPasswordError.text('');\n\n        // Yeni şifre alanlarını göster\n        self.newPasswordSection.removeClass('d-none');\n        self.confirmPasswordSection.removeClass('d-none');\n        self.submitButtonSection.removeClass('d-none');\n\n        // Geçici şifre alanını devre dışı bırak\n        self.tempPasswordInput.prop('disabled', true);\n\n        // Bildirim göster\n        AuthHelpers.showNotification('success', 'Doğrulama Başarılı', 'Geçici şifre doğrulandı. Lütfen yeni şifrenizi belirleyin.');\n      } else {\n        self.tempPasswordVerified = false;\n        self.tempPasswordInput.removeClass('is-valid').addClass('is-invalid');\n\n        // Hata mesajını göster\n        const errorMessage = response.error || \"Geçici şifre doğrulanamadı\";\n        self.tempPasswordError.text(errorMessage);\n        console.error(\"Şifre doğrulama hatası:\", errorMessage);\n      }\n    }, function (error) {\n      self.verificationInProgress = false;\n      self.tempPasswordVerified = false;\n      self.tempPasswordInput.removeClass('is-valid').addClass('is-invalid');\n\n      // Hata mesajını göster\n      console.error(\"AJAX hatası:\", error);\n      self.tempPasswordError.text(\"Bağlantı hatası. Lütfen tekrar deneyin.\");\n    });\n  }\n};\n\n// Login sayfası işlevleri\nconst Login = {\n  init: function () {\n    window.logger && window.logger.debug(\"Login page loaded\");\n    this.setupEventListeners();\n\n    // URL parametrelerinden mesaj göster\n    this.showMessageFromURL();\n  },\n  setupEventListeners: function () {\n    // Şifre göster/gizle\n    $(\"#show_hide_password a\").on('click', function (event) {\n      event.preventDefault();\n      AuthHelpers.togglePasswordVisibility('#show_hide_password');\n    });\n\n    // Form gönderimi\n    $('#loginForm').on('submit', function (e) {\n      window.logger && window.logger.debug(\"Login form submit\");\n\n      // Form doğrulama\n      const email = $('#inputEmailAddress').val();\n      const password = $('#inputChoosePassword').val();\n      if (!email || !password) {\n        e.preventDefault();\n        AuthHelpers.showNotification('warning', 'Uyarı', 'Lütfen tüm alanları doldurun');\n        return false;\n      }\n    });\n  },\n  showMessageFromURL: function () {\n    // URL'den mesaj parametrelerini al\n    const urlParams = new URLSearchParams(window.location.search);\n    const messageType = urlParams.get('messageType');\n    const messageTitle = urlParams.get('messageTitle');\n    const messageText = urlParams.get('messageText');\n\n    // Mesaj varsa göster\n    if (messageType && messageText) {\n      AuthHelpers.showNotification(messageType, messageTitle || 'Bilgi', messageText);\n\n      // URL'i temizle\n      if (window.history.replaceState) {\n        window.history.replaceState(null, null, window.location.pathname);\n      }\n    }\n  }\n};\n\n// Register sayfası işlevleri\nconst Register = {\n  // Form alanlarının doğrulama durumunu takip etmek için değişkenler\n  formFields: {\n    name: false,\n    email: false,\n    phone: false\n  },\n  init: function () {\n    window.logger && window.logger.debug(\"Register page loaded\");\n    this.setupEventListeners();\n\n    // CAPTCHA oluştur (başlangıçta gizli)\n    this.generateMathCaptcha();\n  },\n  setupEventListeners: function () {\n    const self = this;\n\n    // Form alanları değiştiğinde doğrulama yap\n    $('#inputName').on('input blur', function () {\n      const value = $(this).val();\n      const isValid = value.length >= 5;\n      self.formFields.name = isValid;\n      self.updateFieldValidation($(this), isValid);\n      self.checkAllFields();\n    });\n    $('#inputEmailAddress').on('input blur', function () {\n      const value = $(this).val();\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      const isValid = emailRegex.test(value);\n      self.formFields.email = isValid;\n      self.updateFieldValidation($(this), isValid);\n      self.checkAllFields();\n    });\n    $('#inputPhone').on('input blur', function () {\n      const value = $(this).val();\n      const phoneRegex = /^0[0-9 ]{10,14}$/;\n      const isValid = phoneRegex.test(value);\n      self.formFields.phone = isValid;\n      self.updateFieldValidation($(this), isValid);\n      self.checkAllFields();\n\n      // Telefon numarası formatlama - Sadece başa 0 ekle\n      if (value.length > 0 && value.charAt(0) !== '0') {\n        $(this).val('0' + value);\n      }\n    });\n\n    // Captcha alanı için doğrulama\n    $('#captchaAnswer').on('input blur', function () {\n      // Eğer captcha bölümü görünür değilse işlem yapma\n      if ($('#captchaSection').is(':hidden')) {\n        return;\n      }\n      const answerVal = $(this).val().trim();\n      const expectedVal = $('#captchaExpected').val().trim();\n\n      // Boş değer kontrolü\n      if (!answerVal) {\n        self.updateFieldValidation($(this), false);\n        return;\n      }\n\n      // Sayısal değere dönüştür\n      const answer = parseInt(answerVal);\n      const expected = parseInt(expectedVal);\n      window.logger && window.logger.debug(\"Captcha kontrolü:\", {\n        answer,\n        expected,\n        isValid: answer === expected\n      });\n\n      // Sayısal karşılaştırma yap\n      const isValid = !isNaN(answer) && !isNaN(expected) && answer === expected;\n      self.updateFieldValidation($(this), isValid);\n\n      // Doğrulama başarılı olduğunda captcha değerini form gönderilene kadar sakla\n      if (isValid) {\n        $(this).data('validatedAnswer', answer);\n      }\n    });\n\n    // Form gönderimi\n    $('#registerForm').on('submit', function (e) {\n      window.logger && window.logger.debug(\"Register form submit\");\n\n      // Form doğrulama - tüm alanları kontrol et\n      if (!self.checkAllFields(true)) {\n        e.preventDefault();\n        AuthHelpers.showNotification('warning', 'Uyarı', 'Lütfen tüm alanları doğru şekilde doldurun');\n        return false;\n      }\n\n      // Captcha kontrolü - değerleri tekrar al\n      const captchaAnswerInput = $('#captchaAnswer');\n      const captchaExpectedInput = $('#captchaExpected');\n      if (captchaAnswerInput.length && captchaExpectedInput.length) {\n        // Önce data-validatedAnswer'ı kontrol et (önceden doğrulanmış değer)\n        const validatedAnswer = captchaAnswerInput.data('validatedAnswer');\n        const captchaExpected = parseInt(captchaExpectedInput.val().trim());\n\n        // Eğer daha önce doğrulanmış bir değer varsa ve bu değer beklenen değerle eşleşiyorsa\n        if (!isNaN(validatedAnswer) && !isNaN(captchaExpected) && validatedAnswer === captchaExpected) {\n          window.logger && window.logger.debug(\"Form gönderilirken captcha kontrolü: Önceden doğrulanmış değer kullanılıyor\", {\n            validatedAnswer,\n            captchaExpected\n          });\n          return true; // Form gönderimi devam etsin\n        }\n\n        // Önceden doğrulanmış değer yoksa veya eşleşmiyorsa, mevcut değeri kontrol et\n        const captchaAnswer = parseInt(captchaAnswerInput.val().trim());\n        window.logger && window.logger.debug(\"Form gönderilirken captcha kontrolü:\", {\n          captchaAnswer,\n          captchaExpected,\n          validatedAnswer,\n          rawAnswer: captchaAnswerInput.val(),\n          rawExpected: captchaExpectedInput.val()\n        });\n\n        // Sayısal karşılaştırma yap\n        if (isNaN(captchaAnswer) || isNaN(captchaExpected) || captchaAnswer !== captchaExpected) {\n          e.preventDefault();\n          captchaAnswerInput.removeClass('is-valid').addClass('is-invalid');\n          AuthHelpers.showNotification('warning', 'Uyarı', 'Doğrulama kodunu doğru giriniz');\n          return false;\n        }\n      }\n    });\n\n    // Captcha yenileme butonu\n    $('#refreshCaptcha').on('click', function () {\n      self.generateMathCaptcha();\n    });\n  },\n  // Alan doğrulama durumunu güncelle\n  updateFieldValidation: function (field, isValid) {\n    if (isValid) {\n      field.removeClass('is-invalid').addClass('is-valid');\n    } else {\n      field.removeClass('is-valid').addClass('is-invalid');\n    }\n  },\n  // Tüm alanların doğruluğunu kontrol et\n  checkAllFields: function (showNotification = false) {\n    const allValid = this.formFields.name && this.formFields.email && this.formFields.phone;\n\n    // Tüm alanlar doğruysa captcha bölümünü göster\n    if (allValid) {\n      // Eğer captcha bölümü zaten görünür değilse göster ve yeni captcha oluştur\n      if ($('#captchaSection').is(':hidden')) {\n        $('#captchaSection').slideDown(300);\n        this.generateMathCaptcha();\n      }\n    } else {\n      $('#captchaSection').slideUp(300);\n    }\n    if (showNotification && !allValid) {\n      // Hangi alanların eksik olduğunu belirle\n      let missingFields = [];\n      if (!this.formFields.name) missingFields.push(\"Ad Soyad\");\n      if (!this.formFields.email) missingFields.push(\"E-posta\");\n      if (!this.formFields.phone) missingFields.push(\"Telefon\");\n      AuthHelpers.showNotification('warning', 'Eksik Bilgi', 'Lütfen şu alanları doğru şekilde doldurun: ' + missingFields.join(', '));\n    }\n    return allValid;\n  },\n  // CAPTCHA oluşturma fonksiyonu\n  generateMathCaptcha: function () {\n    const challengeElement = document.getElementById('captchaChallenge');\n    const answerElement = document.getElementById('captchaAnswer');\n    const expectedElement = document.getElementById('captchaExpected');\n    if (!challengeElement || !answerElement || !expectedElement) return;\n\n    // Rastgele 1-10 arası sayılar\n    const num1 = Math.floor(Math.random() * 10) + 1;\n    const num2 = Math.floor(Math.random() * 10) + 1;\n\n    // Toplama/çıkarma işlemi (çıkarma işleminde negatif sonuç çıkmaması için kontrol)\n    let result, question;\n    const isAddition = Math.random() > 0.5;\n    if (isAddition) {\n      result = num1 + num2;\n      question = `${num1} + ${num2} = ?`;\n    } else {\n      // Büyük sayıdan küçük sayıyı çıkar\n      if (num1 >= num2) {\n        result = num1 - num2;\n        question = `${num1} - ${num2} = ?`;\n      } else {\n        result = num2 - num1;\n        question = `${num2} - ${num1} = ?`;\n      }\n    }\n\n    // Soruyu ekrana yaz\n    challengeElement.textContent = question;\n\n    // Beklenen sonucu sakla\n    expectedElement.value = result.toString();\n\n    // Cevap alanını sıfırla\n    answerElement.value = '';\n    answerElement.classList.remove('is-valid', 'is-invalid');\n\n    // Önceden doğrulanmış değeri temizle\n    $(answerElement).removeData('validatedAnswer');\n    window.logger && window.logger.debug(\"Yeni captcha oluşturuldu:\", {\n      question,\n      result\n    });\n  }\n};\n\n// Forgot Password sayfası işlevleri\nconst ForgotPassword = {\n  init: function () {\n    window.logger && window.logger.debug(\"Forgot password page loaded\");\n    this.setupEventListeners();\n  },\n  setupEventListeners: function () {\n    // Form gönderimi\n    $('#forgotPasswordForm').on('submit', function (e) {\n      window.logger && window.logger.debug(\"Forgot password form submit\");\n\n      // Form doğrulama\n      const email = $('#inputEmailAddress').val();\n      if (!email) {\n        e.preventDefault();\n        AuthHelpers.showNotification('warning', 'Uyarı', 'Lütfen e-posta adresinizi girin');\n        return false;\n      }\n    });\n  }\n};\n\n// Sayfa yüklendiğinde doğru modülü başlat\n$(document).ready(function () {\n  // Sayfanın hangi auth sayfası olduğunu belirle\n  const pageId = $('body').data('page-id');\n  switch (pageId) {\n    case 'login':\n      Login.init();\n      break;\n    case 'register':\n      Register.init();\n      break;\n    case 'forgot-password':\n      ForgotPassword.init();\n      break;\n    case 'reset-password':\n      ResetPassword.init();\n      break;\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///367\n\n}");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ var __webpack_exports__ = (__webpack_exec__(367));
/******/ }
]);