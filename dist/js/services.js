/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkkolajAI_frontend"] = self["webpackChunkkolajAI_frontend"] || []).push([[671],{

/***/ 889:
/***/ (function(module) {

eval("{/**\n * Frontend Services for KolajAI\n * Bu dosya frontend'de kullanılan service sınıflarını içerir\n */\n\n// Base API Service\nclass ApiService {\n  constructor(baseURL = '') {\n    this.baseURL = baseURL || window.location.origin;\n    this.defaultHeaders = {\n      'Content-Type': 'application/json',\n      'X-Requested-With': 'XMLHttpRequest'\n    };\n  }\n  async request(method, endpoint, data = null, options = {}) {\n    var _document$querySelect;\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      method: method.toUpperCase(),\n      headers: {\n        ...this.defaultHeaders,\n        ...options.headers\n      },\n      credentials: 'same-origin',\n      ...options\n    };\n\n    // Add CSRF token if available\n    const csrfToken = (_document$querySelect = document.querySelector('meta[name=\"csrf-token\"]')) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.getAttribute('content');\n    if (csrfToken) {\n      config.headers['X-CSRF-Token'] = csrfToken;\n    }\n\n    // Add auth token if available\n    const authToken = localStorage.getItem('auth_token');\n    if (authToken) {\n      config.headers['Authorization'] = `Bearer ${authToken}`;\n    }\n    if (data && ['POST', 'PUT', 'PATCH'].includes(config.method)) {\n      config.body = JSON.stringify(data);\n    }\n    try {\n      const response = await fetch(url, config);\n\n      // Handle different response types\n      const contentType = response.headers.get('content-type');\n      let responseData;\n      if (contentType && contentType.includes('application/json')) {\n        responseData = await response.json();\n      } else {\n        responseData = await response.text();\n      }\n      if (!response.ok) {\n        throw new Error(responseData.message || `HTTP ${response.status}: ${response.statusText}`);\n      }\n      return {\n        data: responseData,\n        status: response.status,\n        headers: response.headers\n      };\n    } catch (error) {\n      console.error('API Request failed:', error);\n      throw error;\n    }\n  }\n  async get(endpoint, options = {}) {\n    return this.request('GET', endpoint, null, options);\n  }\n  async post(endpoint, data, options = {}) {\n    return this.request('POST', endpoint, data, options);\n  }\n  async put(endpoint, data, options = {}) {\n    return this.request('PUT', endpoint, data, options);\n  }\n  async patch(endpoint, data, options = {}) {\n    return this.request('PATCH', endpoint, data, options);\n  }\n  async delete(endpoint, options = {}) {\n    return this.request('DELETE', endpoint, null, options);\n  }\n}\n\n// Authentication Service\nclass AuthService {\n  constructor() {\n    this.apiService = new ApiService();\n    this.currentUser = null;\n    this.isAuthenticated = false;\n  }\n  async init() {\n    // Check if user is already authenticated\n    const token = localStorage.getItem('auth_token');\n    if (token) {\n      try {\n        await this.getCurrentUser();\n      } catch (error) {\n        // Token might be expired, remove it\n        this.logout();\n      }\n    }\n  }\n  async login(email, password) {\n    try {\n      const response = await this.apiService.post('/api/auth/login', {\n        email,\n        password\n      });\n      if (response.data.token) {\n        localStorage.setItem('auth_token', response.data.token);\n        this.currentUser = response.data.user;\n        this.isAuthenticated = true;\n\n        // Trigger auth state change event\n        window.dispatchEvent(new CustomEvent('authStateChanged', {\n          detail: {\n            authenticated: true,\n            user: this.currentUser\n          }\n        }));\n      }\n      return response;\n    } catch (error) {\n      console.error('Login failed:', error);\n      throw error;\n    }\n  }\n  async register(userData) {\n    try {\n      const response = await this.apiService.post('/api/auth/register', userData);\n      return response;\n    } catch (error) {\n      console.error('Registration failed:', error);\n      throw error;\n    }\n  }\n  async getCurrentUser() {\n    try {\n      const response = await this.apiService.get('/api/auth/me');\n      this.currentUser = response.data;\n      this.isAuthenticated = true;\n      return response;\n    } catch (error) {\n      this.currentUser = null;\n      this.isAuthenticated = false;\n      throw error;\n    }\n  }\n  async logout() {\n    try {\n      await this.apiService.post('/api/auth/logout');\n    } catch (error) {\n      console.error('Logout request failed:', error);\n    } finally {\n      // Clear local state regardless of API call result\n      localStorage.removeItem('auth_token');\n      this.currentUser = null;\n      this.isAuthenticated = false;\n\n      // Trigger auth state change event\n      window.dispatchEvent(new CustomEvent('authStateChanged', {\n        detail: {\n          authenticated: false,\n          user: null\n        }\n      }));\n\n      // Redirect to login page\n      window.location.href = '/login';\n    }\n  }\n  async forgotPassword(email) {\n    try {\n      const response = await this.apiService.post('/api/auth/forgot-password', {\n        email\n      });\n      return response;\n    } catch (error) {\n      console.error('Forgot password failed:', error);\n      throw error;\n    }\n  }\n  async resetPassword(token, password, passwordConfirm) {\n    try {\n      const response = await this.apiService.post('/api/auth/reset-password', {\n        token,\n        password,\n        password_confirm: passwordConfirm\n      });\n      return response;\n    } catch (error) {\n      console.error('Reset password failed:', error);\n      throw error;\n    }\n  }\n  async updateProfile(userData) {\n    try {\n      const response = await this.apiService.put('/api/auth/profile', userData);\n      this.currentUser = response.data;\n      return response;\n    } catch (error) {\n      console.error('Profile update failed:', error);\n      throw error;\n    }\n  }\n  async changePassword(currentPassword, newPassword) {\n    try {\n      const response = await this.apiService.post('/api/auth/change-password', {\n        current_password: currentPassword,\n        new_password: newPassword\n      });\n      return response;\n    } catch (error) {\n      console.error('Password change failed:', error);\n      throw error;\n    }\n  }\n  getUser() {\n    return this.currentUser;\n  }\n  isLoggedIn() {\n    return this.isAuthenticated;\n  }\n}\n\n// Cart Service\nclass CartService {\n  constructor() {\n    this.apiService = new ApiService();\n    this.cart = {\n      items: [],\n      total: 0,\n      count: 0,\n      subtotal: 0,\n      tax: 0,\n      shipping: 0\n    };\n    this.storageKey = 'kolajAI_cart';\n  }\n  async init() {\n    var _window$app;\n    // Load cart from localStorage first (for offline support)\n    this.loadFromStorage();\n\n    // Then sync with server if user is authenticated\n    if ((_window$app = window.app) !== null && _window$app !== void 0 && (_window$app = _window$app.authService) !== null && _window$app !== void 0 && _window$app.isLoggedIn()) {\n      try {\n        await this.syncWithServer();\n      } catch (error) {\n        console.warn('Cart sync failed:', error);\n      }\n    }\n  }\n  async getCart() {\n    try {\n      const response = await this.apiService.get('/api/cart');\n      this.updateCart(response.data);\n      return this.cart;\n    } catch (error) {\n      console.error('Get cart failed:', error);\n      return this.cart;\n    }\n  }\n  async addItem(productId, quantity = 1, options = {}) {\n    try {\n      const response = await this.apiService.post('/api/cart/add', {\n        product_id: productId,\n        quantity,\n        ...options\n      });\n      this.updateCart(response.data);\n      this.saveToStorage();\n      this.triggerCartUpdate();\n      return response;\n    } catch (error) {\n      console.error('Add to cart failed:', error);\n      // Fallback to local storage for offline support\n      this.addItemLocally(productId, quantity, options);\n      throw error;\n    }\n  }\n  async updateItem(itemId, quantity) {\n    try {\n      const response = await this.apiService.put(`/api/cart/item/${itemId}`, {\n        quantity\n      });\n      this.updateCart(response.data);\n      this.saveToStorage();\n      this.triggerCartUpdate();\n      return response;\n    } catch (error) {\n      console.error('Update cart item failed:', error);\n      throw error;\n    }\n  }\n  async removeItem(itemId) {\n    try {\n      const response = await this.apiService.delete(`/api/cart/item/${itemId}`);\n      this.updateCart(response.data);\n      this.saveToStorage();\n      this.triggerCartUpdate();\n      return response;\n    } catch (error) {\n      console.error('Remove cart item failed:', error);\n      throw error;\n    }\n  }\n  async clearCart() {\n    try {\n      const response = await this.apiService.delete('/api/cart');\n      this.cart = {\n        items: [],\n        total: 0,\n        count: 0,\n        subtotal: 0,\n        tax: 0,\n        shipping: 0\n      };\n      this.saveToStorage();\n      this.triggerCartUpdate();\n      return response;\n    } catch (error) {\n      console.error('Clear cart failed:', error);\n      throw error;\n    }\n  }\n  async applyCoupon(couponCode) {\n    try {\n      const response = await this.apiService.post('/api/cart/coupon', {\n        coupon_code: couponCode\n      });\n      this.updateCart(response.data);\n      this.saveToStorage();\n      this.triggerCartUpdate();\n      return response;\n    } catch (error) {\n      console.error('Apply coupon failed:', error);\n      throw error;\n    }\n  }\n  async removeCoupon() {\n    try {\n      const response = await this.apiService.delete('/api/cart/coupon');\n      this.updateCart(response.data);\n      this.saveToStorage();\n      this.triggerCartUpdate();\n      return response;\n    } catch (error) {\n      console.error('Remove coupon failed:', error);\n      throw error;\n    }\n  }\n  addItemLocally(productId, quantity, options) {\n    // Find existing item\n    const existingItem = this.cart.items.find(item => item.product_id === productId);\n    if (existingItem) {\n      existingItem.quantity += quantity;\n    } else {\n      this.cart.items.push({\n        id: Date.now(),\n        // Temporary ID\n        product_id: productId,\n        quantity,\n        ...options\n      });\n    }\n    this.calculateTotals();\n    this.saveToStorage();\n    this.triggerCartUpdate();\n  }\n  updateCart(cartData) {\n    this.cart = {\n      ...this.cart,\n      ...cartData\n    };\n    this.calculateTotals();\n  }\n  calculateTotals() {\n    this.cart.count = this.cart.items.reduce((sum, item) => sum + item.quantity, 0);\n    this.cart.subtotal = this.cart.items.reduce((sum, item) => sum + item.price * item.quantity, 0);\n    this.cart.total = this.cart.subtotal + this.cart.tax + this.cart.shipping;\n  }\n  saveToStorage() {\n    try {\n      localStorage.setItem(this.storageKey, JSON.stringify(this.cart));\n    } catch (error) {\n      console.error('Failed to save cart to storage:', error);\n    }\n  }\n  loadFromStorage() {\n    try {\n      const stored = localStorage.getItem(this.storageKey);\n      if (stored) {\n        this.cart = {\n          ...this.cart,\n          ...JSON.parse(stored)\n        };\n      }\n    } catch (error) {\n      console.error('Failed to load cart from storage:', error);\n    }\n  }\n  async syncWithServer() {\n    // Sync local cart with server\n    if (this.cart.items.length > 0) {\n      for (const item of this.cart.items) {\n        if (!item.synced) {\n          try {\n            await this.addItem(item.product_id, item.quantity, item.options);\n            item.synced = true;\n          } catch (error) {\n            console.warn('Failed to sync cart item:', error);\n          }\n        }\n      }\n    }\n\n    // Get latest cart from server\n    await this.getCart();\n  }\n  async savePendingData() {\n    // Save any pending changes before page unload\n    this.saveToStorage();\n  }\n  async syncOfflineData() {\n    // Sync offline changes when connection is restored\n    await this.syncWithServer();\n  }\n  triggerCartUpdate() {\n    // Trigger cart update event\n    window.dispatchEvent(new CustomEvent('cartUpdated', {\n      detail: this.cart\n    }));\n  }\n  getItemCount() {\n    return this.cart.count;\n  }\n  getTotal() {\n    return this.cart.total;\n  }\n  getItems() {\n    return this.cart.items;\n  }\n}\n\n// Notification Service\nclass NotificationService {\n  constructor() {\n    this.apiService = new ApiService();\n    this.notifications = [];\n    this.unreadCount = 0;\n    this.pollInterval = null;\n    this.pollFrequency = 30000; // 30 seconds\n  }\n  async init() {\n    var _window$app2;\n    // Load initial notifications\n    await this.getNotifications();\n\n    // Start polling for new notifications if user is authenticated\n    if ((_window$app2 = window.app) !== null && _window$app2 !== void 0 && (_window$app2 = _window$app2.authService) !== null && _window$app2 !== void 0 && _window$app2.isLoggedIn()) {\n      this.startPolling();\n    }\n\n    // Listen for auth state changes\n    window.addEventListener('authStateChanged', event => {\n      if (event.detail.authenticated) {\n        this.startPolling();\n      } else {\n        this.stopPolling();\n        this.notifications = [];\n        this.unreadCount = 0;\n      }\n    });\n  }\n  async getNotifications(page = 1, limit = 20) {\n    try {\n      const response = await this.apiService.get(`/api/notifications?page=${page}&limit=${limit}`);\n      if (page === 1) {\n        this.notifications = response.data.notifications || [];\n      } else {\n        this.notifications = [...this.notifications, ...(response.data.notifications || [])];\n      }\n      this.unreadCount = response.data.unread_count || 0;\n      this.triggerNotificationUpdate();\n      return response;\n    } catch (error) {\n      console.error('Get notifications failed:', error);\n      return {\n        data: {\n          notifications: [],\n          unread_count: 0\n        }\n      };\n    }\n  }\n  async markAsRead(notificationId) {\n    try {\n      const response = await this.apiService.post(`/api/notifications/${notificationId}/read`);\n\n      // Update local notification\n      const notification = this.notifications.find(n => n.id === notificationId);\n      if (notification) {\n        notification.read_at = new Date().toISOString();\n        this.unreadCount = Math.max(0, this.unreadCount - 1);\n        this.triggerNotificationUpdate();\n      }\n      return response;\n    } catch (error) {\n      console.error('Mark notification as read failed:', error);\n      throw error;\n    }\n  }\n  async markAllAsRead() {\n    try {\n      const response = await this.apiService.post('/api/notifications/read-all');\n\n      // Update local notifications\n      this.notifications.forEach(notification => {\n        if (!notification.read_at) {\n          notification.read_at = new Date().toISOString();\n        }\n      });\n      this.unreadCount = 0;\n      this.triggerNotificationUpdate();\n      return response;\n    } catch (error) {\n      console.error('Mark all notifications as read failed:', error);\n      throw error;\n    }\n  }\n  async deleteNotification(notificationId) {\n    try {\n      const response = await this.apiService.delete(`/api/notifications/${notificationId}`);\n\n      // Remove from local notifications\n      const index = this.notifications.findIndex(n => n.id === notificationId);\n      if (index !== -1) {\n        const notification = this.notifications[index];\n        if (!notification.read_at) {\n          this.unreadCount = Math.max(0, this.unreadCount - 1);\n        }\n        this.notifications.splice(index, 1);\n        this.triggerNotificationUpdate();\n      }\n      return response;\n    } catch (error) {\n      console.error('Delete notification failed:', error);\n      throw error;\n    }\n  }\n  async sendNotification(userId, title, message, type = 'info', data = {}) {\n    try {\n      const response = await this.apiService.post('/api/notifications/send', {\n        user_id: userId,\n        title,\n        message,\n        type,\n        data\n      });\n      return response;\n    } catch (error) {\n      console.error('Send notification failed:', error);\n      throw error;\n    }\n  }\n  startPolling() {\n    if (this.pollInterval) {\n      clearInterval(this.pollInterval);\n    }\n    this.pollInterval = setInterval(async () => {\n      try {\n        await this.getNotifications();\n      } catch (error) {\n        console.warn('Notification polling failed:', error);\n      }\n    }, this.pollFrequency);\n  }\n  stopPolling() {\n    if (this.pollInterval) {\n      clearInterval(this.pollInterval);\n      this.pollInterval = null;\n    }\n  }\n  async syncOfflineData() {\n    // Sync any offline notification actions when connection is restored\n    await this.getNotifications();\n  }\n  triggerNotificationUpdate() {\n    // Trigger notification update event\n    window.dispatchEvent(new CustomEvent('notificationsUpdated', {\n      detail: {\n        notifications: this.notifications,\n        unreadCount: this.unreadCount\n      }\n    }));\n  }\n  getNotifications() {\n    return this.notifications;\n  }\n  getUnreadCount() {\n    return this.unreadCount;\n  }\n\n  // Browser notification support\n  async requestPermission() {\n    if ('Notification' in window) {\n      const permission = await Notification.requestPermission();\n      return permission === 'granted';\n    }\n    return false;\n  }\n  showBrowserNotification(title, options = {}) {\n    if ('Notification' in window && Notification.permission === 'granted') {\n      const notification = new Notification(title, {\n        icon: '/static/assets/images/icon-192x192.png',\n        badge: '/static/assets/images/icon-72x72.png',\n        ...options\n      });\n\n      // Auto close after 5 seconds\n      setTimeout(() => notification.close(), 5000);\n      return notification;\n    }\n  }\n}\n\n// Initialize services when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n  // Make services globally available\n  window.app = window.app || {};\n  window.app.apiService = new ApiService();\n  window.app.authService = new AuthService();\n  window.app.cartService = new CartService();\n  window.app.notificationService = new NotificationService();\n});\n\n// Export for module systems\nif ( true && module.exports) {\n  module.exports = {\n    ApiService,\n    AuthService,\n    CartService,\n    NotificationService\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///889\n\n}");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ var __webpack_exports__ = (__webpack_exec__(889));
/******/ }
]);