{"version":3,"file":"js/notifications.a8f15033.js","mappings":"uGAMA,SAAUA,GACR,aAGAA,EAAOC,QAAUD,EAAOC,SAAW,CAAC,EAGpC,MAAMC,EAAuB,CAC3BC,SAAU,YACVC,UAAW,cACXC,UAAW,eACXC,MAAO,IACPC,SAAS,EACTC,gBAAgB,EAChBC,OAAO,GAIHC,EAAoB,CACxB,QAAW,qBACX,MAAS,iBACT,QAAW,6BACX,KAAQ,oBACR,QAAW,cAUb,SAASC,EAAiBC,EAAMC,EAAOC,EAASC,EAAU,CAAC,GAEpD,CAAC,UAAW,QAAS,UAAW,OAAQ,WAAWC,SAASJ,KAC/DA,EAAO,QAIT,MAAMK,EAAWC,OAAOC,OAAO,CAAC,EAAGjB,EAAsBa,GAGzDE,EAASG,KAAOL,EAAQK,MAAQV,EAAkBE,IAASF,EAAkBW,QAGzErB,EAAOsB,SAAWtB,EAAOsB,QAAQC,QACnCD,QAAQC,OAAOX,EAAM,CACnBC,MAAOA,EACPW,IAAKV,EACLL,OAAO,EACPgB,UAAW,QACRR,IAIDjB,EAAOC,QAAQyB,OAMnBC,MAAM,GAAGd,MAAUC,IAEvB,CAoFAc,SAASC,iBAAiB,mBAAoB,YA9E9C,WACE,MAAMC,EAAY,IAAIC,gBAAgB/B,EAAOgC,SAASC,QAChDC,EAAcJ,EAAUK,IAAI,eAC5BC,EAAeN,EAAUK,IAAI,gBAC7BE,EAAcP,EAAUK,IAAI,eAElC,GAAID,GAAeG,EAAa,CAC9B1B,EACEuB,EACAE,GA2CN,SAAyBxB,GACvB,OAAQA,GACN,IAAK,UAAW,MAAO,0BACvB,IAAK,QAAS,MAAO,OACrB,IAAK,UAAW,MAAO,aACvB,IAAK,OAAQ,MAAO,QACpB,QAAS,MAAO,WAEpB,CAnDsB0B,CAAgBJ,GAChCG,GAIF,MAAME,EAAM,IAAIC,IAAIxC,EAAOgC,SAASS,MACpCF,EAAIG,aAAaC,OAAO,eACxBJ,EAAIG,aAAaC,OAAO,gBACxBJ,EAAIG,aAAaC,OAAO,eACxB3C,EAAO4C,QAAQC,aAAa,CAAC,EAAGjB,SAASf,MAAO0B,EAAIO,WACtD,CACF,CA2DEC,GAtDF,WACE,GAAI/C,EAAOC,SAAWD,EAAOC,QAAQ+C,cAAe,CAClD,MAAM,QAAEC,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEC,GAAYpD,EAAOC,QAAQ+C,cAErDC,GACFtC,EAAiB,UAAW,0BAAYsC,GAGtCC,GACFvC,EAAiB,QAAS,OAAQuC,GAGhCC,GACFxC,EAAiB,OAAQ,QAASwC,GAGhCC,GACFzC,EAAiB,UAAW,aAASyC,EAEzC,CACF,CAmCEC,EACF,GAGArD,EAAOC,QAAQsB,OAAS,CACtB+B,KAAM3C,EACNsC,QAASA,CAACnC,EAASD,EAAQ,0BAAYE,EAAU,CAAC,IAAMJ,EAAiB,UAAWE,EAAOC,EAASC,GACpGmC,MAAOA,CAACpC,EAASD,EAAQ,OAAQE,EAAU,CAAC,IAAMJ,EAAiB,QAASE,EAAOC,EAASC,GAC5FoC,KAAMA,CAACrC,EAASD,EAAQ,QAASE,EAAU,CAAC,IAAMJ,EAAiB,OAAQE,EAAOC,EAASC,GAC3FqC,QAASA,CAACtC,EAASD,EAAQ,aAASE,EAAU,CAAC,IAAMJ,EAAiB,UAAWE,EAAOC,EAASC,GACjGwC,aArBF,SAAkChB,EAAK3B,EAAMC,EAAOC,GAClD,MAAM0C,EAAc,IAAIhB,IAAID,EAAKvC,EAAOgC,SAASyB,QACjDD,EAAYd,aAAagB,IAAI,cAAe9C,GACxCC,GAAO2C,EAAYd,aAAagB,IAAI,eAAgB7C,GACxD2C,EAAYd,aAAagB,IAAI,cAAe5C,GAC5Cd,EAAOgC,SAASS,KAAOe,EAAYV,UACrC,EAkBD,CAnKD,CAmKG9C,O","sources":["webpack://kolajAI-frontend/./web/static/js/notifications.js"],"sourcesContent":["/**\n * KolajAI Notifications Module\n * Bu modül, tüm uygulama genelinde kullanılabilecek bildirim işlevlerini sağlar.\n */\n\n// Hemen çalıştırılacak anonim fonksiyon (IIFE)\n(function(window) {\n  'use strict';\n  \n  // KolajAI namespace oluştur veya mevcut olanı kullan\n  window.KolajAI = window.KolajAI || {};\n  \n  // Bildirim ayarları\n  const notificationDefaults = {\n    position: 'top right',\n    showClass: 'fadeInRight',\n    hideClass: 'fadeOutRight',\n    delay: 5000,\n    rounded: true,\n    delayIndicator: true,\n    sound: false\n  };\n  \n  // Bildirim tiplerine göre ikonlar\n  const notificationIcons = {\n    'success': 'bi bi-check-circle',\n    'error': 'bi bi-x-circle',\n    'warning': 'bi bi-exclamation-triangle',\n    'info': 'bi bi-info-circle',\n    'default': 'bi bi-bell'\n  };\n  \n  /**\n   * Bildirim gösterme fonksiyonu\n   * @param {string} type - Bildirim tipi (success, error, warning, info)\n   * @param {string} title - Bildirim başlığı\n   * @param {string} message - Bildirim mesajı\n   * @param {object} options - Ek ayarlar\n   */\n  function showNotification(type, title, message, options = {}) {\n    // Geçerli bir tip değilse varsayılanı kullan\n    if (!['success', 'error', 'warning', 'info', 'default'].includes(type)) {\n      type = 'info';\n    }\n    \n    // Varsayılan ayarları ve kullanıcı ayarlarını birleştir\n    const settings = Object.assign({}, notificationDefaults, options);\n    \n    // Bildirim ikonunu ayarla\n    settings.icon = options.icon || notificationIcons[type] || notificationIcons.default;\n    \n    // Bildirim göster\n    if (window.Lobibox && window.Lobibox.notify) {\n      Lobibox.notify(type, {\n        title: title,\n        msg: message,\n        sound: false, // Ses devre dışı\n        soundPath: null, // Ses dosyası yolu yok\n        ...settings\n      });\n      \n      // Debug için konsola bilgi yazdır\n      if (window.KolajAI.debug) {\n        console.debug(`Notification shown: ${type} - ${title}`);\n      }\n    } else {\n      // Lobibox yoksa basit bir alert göster\n      console.warn('Lobibox notification library not available');\n      alert(`${title}: ${message}`);\n    }\n  }\n  \n  /**\n   * URL parametrelerinden bildirim gösterme\n   * Örnek: ?messageType=success&messageTitle=Başarılı&messageText=İşlem+başarıyla+tamamlandı\n   */\n  function showNotificationsFromURL() {\n    const urlParams = new URLSearchParams(window.location.search);\n    const messageType = urlParams.get('messageType');\n    const messageTitle = urlParams.get('messageTitle');\n    const messageText = urlParams.get('messageText');\n    \n    if (messageType && messageText) {\n      showNotification(\n        messageType,\n        messageTitle || getDefaultTitle(messageType),\n        messageText\n      );\n      \n      // Bildirim gösterildikten sonra URL'i temizle (tarayıcı geçmişini etkilemeden)\n      const url = new URL(window.location.href);\n      url.searchParams.delete('messageType');\n      url.searchParams.delete('messageTitle');\n      url.searchParams.delete('messageText');\n      window.history.replaceState({}, document.title, url.toString());\n    }\n  }\n  \n  /**\n   * Sayfa yüklendiğinde otomatik bildirimler göster\n   */\n  function showAutoNotifications() {\n    if (window.KolajAI && window.KolajAI.notifications) {\n      const { success, error, info, warning } = window.KolajAI.notifications;\n      \n      if (success) {\n        showNotification('success', 'Başarılı', success);\n      }\n      \n      if (error) {\n        showNotification('error', 'Hata', error);\n      }\n      \n      if (info) {\n        showNotification('info', 'Bilgi', info);\n      }\n      \n      if (warning) {\n        showNotification('warning', 'Uyarı', warning);\n      }\n    }\n  }\n  \n  /**\n   * Varsayılan bildirim başlıkları\n   * @param {string} type - Bildirim tipi\n   * @returns {string} Varsayılan başlık\n   */\n  function getDefaultTitle(type) {\n    switch (type) {\n      case 'success': return 'Başarılı';\n      case 'error': return 'Hata';\n      case 'warning': return 'Uyarı';\n      case 'info': return 'Bilgi';\n      default: return 'Bildirim';\n    }\n  }\n  \n  /**\n   * Bildirim ile başka bir sayfaya yönlendirme\n   * @param {string} url - Yönlendirilecek URL\n   * @param {string} type - Bildirim tipi\n   * @param {string} title - Bildirim başlığı\n   * @param {string} message - Bildirim mesajı\n   */\n  function redirectWithNotification(url, type, title, message) {\n    const redirectUrl = new URL(url, window.location.origin);\n    redirectUrl.searchParams.set('messageType', type);\n    if (title) redirectUrl.searchParams.set('messageTitle', title);\n    redirectUrl.searchParams.set('messageText', message);\n    window.location.href = redirectUrl.toString();\n  }\n  \n  // Sayfa yüklendiğinde bildirimleri göster\n  document.addEventListener('DOMContentLoaded', function() {\n    showNotificationsFromURL();\n    showAutoNotifications();\n  });\n  \n  // Bildirim API'sini dışa aktar\n  window.KolajAI.notify = {\n    show: showNotification,\n    success: (message, title = 'Başarılı', options = {}) => showNotification('success', title, message, options),\n    error: (message, title = 'Hata', options = {}) => showNotification('error', title, message, options),\n    info: (message, title = 'Bilgi', options = {}) => showNotification('info', title, message, options),\n    warning: (message, title = 'Uyarı', options = {}) => showNotification('warning', title, message, options),\n    redirectWith: redirectWithNotification\n  };\n  \n})(window); "],"names":["window","KolajAI","notificationDefaults","position","showClass","hideClass","delay","rounded","delayIndicator","sound","notificationIcons","showNotification","type","title","message","options","includes","settings","Object","assign","icon","default","Lobibox","notify","msg","soundPath","debug","alert","document","addEventListener","urlParams","URLSearchParams","location","search","messageType","get","messageTitle","messageText","getDefaultTitle","url","URL","href","searchParams","delete","history","replaceState","toString","showNotificationsFromURL","notifications","success","error","info","warning","showAutoNotifications","show","redirectWith","redirectUrl","origin","set"],"sourceRoot":""}