{"version":3,"file":"js/auth.af64b213.js","mappings":"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","sources":["webpack://kolajAI-frontend/./web/static/js/auth.js"],"sourcesContent":["/**\n * KolajAI Auth Module\n * Bu modül kimlik doğrulama ile ilgili tüm JavaScript işlevlerini içerir\n */\n\n// Uygulama genelinde kullanılacak yardımcı fonksiyonlar\nconst AuthHelpers = {\n  // Şifre görünürlüğünü değiştiren fonksiyon\n  togglePasswordVisibility: function(containerId) {\n    const passwordInput = $(containerId + ' input');\n    const icon = $(containerId + ' i');\n    \n    if (passwordInput.attr('type') === 'password') {\n      passwordInput.attr('type', 'text');\n      icon.removeClass('bi-eye-slash-fill').addClass('bi-eye-fill');\n    } else {\n      passwordInput.attr('type', 'password');\n      icon.removeClass('bi-eye-fill').addClass('bi-eye-slash-fill');\n    }\n  },\n  \n  // Bildirim gösterme fonksiyonu\n  showNotification: function(type, title, message) {\n    // Bildirim tiplerine göre renkler\n    const typeClasses = {\n      'success': 'bg-success text-white',\n      'error': 'bg-danger text-white',\n      'warning': 'bg-warning',\n      'info': 'bg-info text-white'\n    };\n    \n    // Toast elementini oluştur\n    const toastId = 'toast-' + Date.now();\n    const toastHtml = `\n      <div id=\"${toastId}\" class=\"toast ${typeClasses[type] || ''}\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\">\n        <div class=\"toast-header\">\n          <strong class=\"me-auto\">${title}</strong>\n          <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"toast\" aria-label=\"Close\"></button>\n        </div>\n        <div class=\"toast-body\">\n          ${message}\n        </div>\n      </div>\n    `;\n    \n    // Toast container'ı kontrol et veya oluştur\n    let toastContainer = $('.toast-container');\n    if (toastContainer.length === 0) {\n      toastContainer = $('<div class=\"toast-container position-fixed top-0 end-0 p-3\"></div>');\n      $('body').append(toastContainer);\n    }\n    \n    // Toast'u ekle ve göster\n    const toastElement = $(toastHtml);\n    toastContainer.append(toastElement);\n    \n    const toast = new bootstrap.Toast(toastElement[0], {\n      autohide: true,\n      delay: 5000\n    });\n    \n    toast.show();\n    \n    // 5 saniye sonra otomatik kaldır\n    setTimeout(function() {\n      toastElement.remove();\n    }, 5000);\n  },\n  \n  // AJAX isteği gönderme fonksiyonu\n  sendAjaxRequest: function(url, method, data, successCallback, errorCallback) {\n    console.log(\"Sending AJAX request to:\", url, \"with data:\", data);\n    \n    $.ajax({\n      url: url,\n      type: method,\n      data: data,\n      headers: {\n        'X-Requested-With': 'XMLHttpRequest',\n        'Accept': 'application/json'\n      },\n      crossDomain: true,\n      xhrFields: {\n        withCredentials: false\n      },\n      success: function(response) {\n        console.log(\"AJAX response:\", response);\n        if (successCallback) {\n          successCallback(response);\n        }\n      },\n      error: function(xhr, status, error) {\n        console.error(\"AJAX hatası:\", {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          responseText: xhr.responseText,\n          error: error\n        });\n        \n        if (errorCallback) {\n          errorCallback({\n            status: xhr.status,\n            statusText: xhr.statusText,\n            responseText: xhr.responseText,\n            error: error\n          });\n        }\n      }\n    });\n  }\n};\n\n// Şifre sıfırlama sayfası işlevleri\nconst ResetPassword = {\n  // Değişkenler\n  tempPasswordVerified: false,\n  verificationInProgress: false,\n  \n  init: function() {\n    console.log(\"Reset password page loaded\");\n    \n    // DOM elementlerini seç\n    this.tempPasswordInput = $('#inputTempPassword');\n    this.newPasswordSection = $('#newPasswordSection');\n    this.confirmPasswordSection = $('#confirmPasswordSection');\n    this.submitButtonSection = $('#submitButtonSection');\n    this.tempPasswordError = $('#tempPasswordError');\n    this.resetPasswordForm = $('#resetPasswordForm');\n    \n    // E-posta parametresini logla\n    const email = $('input[name=\"email\"]').val();\n    console.log(\"Email parameter:\", email);\n    \n    // URL'deki parametreleri temizle\n    if (window.history.replaceState) {\n      window.history.replaceState(null, null, window.location.pathname);\n    }\n\n    // Başarı mesajını göster\n    AuthHelpers.showNotification('success', 'Kayıt Başarılı', \n      'Hesabınız başarıyla oluşturuldu. Size e-posta ile gönderilen geçici şifre ile hemen yeni bir şifre belirleyebilirsiniz.');\n    \n    // Event listener'ları ekle\n    this.setupEventListeners();\n  },\n  \n  setupEventListeners: function() {\n    const self = this;\n    \n    // Şifre alanında değişiklik olduğunda otomatik doğrulama\n    this.tempPasswordInput.on('input', function() {\n      self.verifyTempPassword($(this).val());\n    });\n\n    // Şifre göster/gizle fonksiyonları\n    $(\"#show_hide_temp_password a\").on('click', function(event) {\n      event.preventDefault();\n      AuthHelpers.togglePasswordVisibility('#show_hide_temp_password');\n    });\n\n    $(\"#show_hide_password a\").on('click', function(event) {\n      event.preventDefault();\n      AuthHelpers.togglePasswordVisibility('#show_hide_password');\n    });\n\n    $(\"#show_hide_password2 a\").on('click', function(event) {\n      event.preventDefault();\n      AuthHelpers.togglePasswordVisibility('#show_hide_password2');\n    });\n\n    // Form gönderimi\n    this.resetPasswordForm.on('submit', function(e) {\n      e.preventDefault(); // Form gönderimini engelle\n      console.log(\"Form submit event triggered\");\n      \n      if (!self.tempPasswordVerified) {\n        console.error(\"Geçici şifre doğrulanmadı, form gönderimi engellendi\");\n        self.tempPasswordError.text('Lütfen önce geçici şifreyi doğrulayın');\n        AuthHelpers.showNotification('warning', 'Uyarı', 'Lütfen önce geçici şifreyi doğrulayın');\n        return false;\n      }\n      \n      // Şifre ve şifre onayı eşleşiyor mu kontrol et\n      const password = $('#inputChoosePassword').val();\n      const confirmPassword = $('#inputChoosePassword2').val();\n      const email = $('input[name=\"email\"]').val();\n      \n      if (password !== confirmPassword) {\n        $('#passwordError').text('Şifreler eşleşmiyor');\n        $('#inputChoosePassword2').addClass('is-invalid');\n        AuthHelpers.showNotification('error', 'Hata', 'Şifreler eşleşmiyor');\n        return false;\n      }\n      \n      // Şifre uzunluğu kontrolü\n      if (password.length < 6) {\n        $('#passwordError').text('Şifre en az 6 karakter olmalıdır');\n        $('#inputChoosePassword').addClass('is-invalid');\n        AuthHelpers.showNotification('error', 'Hata', 'Şifre en az 6 karakter olmalıdır');\n        return false;\n      }\n      \n      console.log(\"Şifre değiştirme işlemi başlatılıyor...\");\n      console.log(\"Form verileri:\", {\n        email: email,\n        password: password,\n        password_confirm: confirmPassword\n      });\n      \n      // Butonun durumunu güncelle\n      const submitButton = $('#submitButtonSection button');\n      const originalText = submitButton.text();\n      submitButton.prop('disabled', true).html('<span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span> İşleniyor...');\n      \n      // AJAX ile şifre değiştirme isteği gönder\n      $.ajax({\n        url: '/reset-password',\n        type: 'POST',\n        contentType: 'application/json',\n        dataType: 'json',\n        data: JSON.stringify({\n          email: email,\n          password: password,\n          password_confirm: confirmPassword\n        }),\n        headers: {\n          'X-Requested-With': 'XMLHttpRequest',\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        beforeSend: function(xhr) {\n          // CORS için OPTIONS isteğine izin ver\n          xhr.setRequestHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');\n          xhr.setRequestHeader('Access-Control-Allow-Headers', 'Content-Type, X-Requested-With');\n        },\n        success: function(response) {\n          console.log(\"Şifre değiştirme başarılı:\", response);\n          // Başarılı mesajı göster\n          AuthHelpers.showNotification('success', 'Başarılı', 'Şifreniz başarıyla değiştirildi');\n          // Login sayfasına yönlendir\n          setTimeout(function() {\n            window.location.href = \"/login?messageType=success&messageTitle=Başarılı&messageText=Şifreniz+başarıyla+değiştirildi.+Yeni+şifrenizle+giriş+yapabilirsiniz.\";\n          }, 2000);\n        },\n        error: function(xhr, status, error) {\n          console.error(\"Şifre değiştirme hatası:\", error);\n          // Hatayı göster\n          submitButton.prop('disabled', false).text(originalText);\n          AuthHelpers.showNotification('error', 'Hata', xhr.responseJSON?.error || 'Şifre değiştirme işlemi başarısız oldu.');\n        }\n      });\n    });\n  },\n  \n  verifyTempPassword: function(tempPassword) {\n    const self = this;\n    \n    if (tempPassword.length < 3) {\n      return;\n    }\n    \n    if (this.verificationInProgress) {\n      return;\n    }\n    \n    this.verificationInProgress = true;\n    \n    console.log(\"Temp password changed, length:\", tempPassword.length);\n    \n    // Doğrulama için AJAX isteği\n    AuthHelpers.sendAjaxRequest(\n      'http://localhost:8080/verify-temp-password',\n      'POST',\n      {\n        email: $('input[name=\"email\"]').val(),\n        temp_password: tempPassword\n      },\n      function(response) {\n        self.verificationInProgress = false;\n        \n        console.log(\"AJAX başarılı:\", response);\n        if (response.success) {\n          self.tempPasswordVerified = true;\n          self.tempPasswordInput.removeClass('is-invalid').addClass('is-valid');\n          self.tempPasswordError.text('');\n          \n          // Yeni şifre alanlarını göster\n          self.newPasswordSection.removeClass('d-none');\n          self.confirmPasswordSection.removeClass('d-none');\n          self.submitButtonSection.removeClass('d-none');\n          \n          // Geçici şifre alanını devre dışı bırak\n          self.tempPasswordInput.prop('disabled', true);\n          \n          // Bildirim göster\n          AuthHelpers.showNotification('success', 'Doğrulama Başarılı', 'Geçici şifre doğrulandı. Lütfen yeni şifrenizi belirleyin.');\n        } else {\n          self.tempPasswordVerified = false;\n          self.tempPasswordInput.removeClass('is-valid').addClass('is-invalid');\n          \n          // Hata mesajını göster\n          const errorMessage = response.error || \"Geçici şifre doğrulanamadı\";\n          self.tempPasswordError.text(errorMessage);\n          console.error(\"Şifre doğrulama hatası:\", errorMessage);\n        }\n      },\n      function(error) {\n        self.verificationInProgress = false;\n        self.tempPasswordVerified = false;\n        self.tempPasswordInput.removeClass('is-valid').addClass('is-invalid');\n        \n        // Hata mesajını göster\n        console.error(\"AJAX hatası:\", error);\n        self.tempPasswordError.text(\"Bağlantı hatası. Lütfen tekrar deneyin.\");\n      }\n    );\n  }\n};\n\n// Login sayfası işlevleri\nconst Login = {\n  init: function() {\n    console.log(\"Login page loaded\");\n    this.setupEventListeners();\n    \n    // URL parametrelerinden mesaj göster\n    this.showMessageFromURL();\n  },\n  \n  setupEventListeners: function() {\n    // Şifre göster/gizle\n    $(\"#show_hide_password a\").on('click', function(event) {\n      event.preventDefault();\n      AuthHelpers.togglePasswordVisibility('#show_hide_password');\n    });\n    \n    // Form gönderimi\n    $('#loginForm').on('submit', function(e) {\n      console.log(\"Login form submit\");\n      \n      // Form doğrulama\n      const email = $('#inputEmailAddress').val();\n      const password = $('#inputChoosePassword').val();\n      \n      if (!email || !password) {\n        e.preventDefault();\n        AuthHelpers.showNotification('warning', 'Uyarı', 'Lütfen tüm alanları doldurun');\n        return false;\n      }\n    });\n  },\n  \n  showMessageFromURL: function() {\n    // URL'den mesaj parametrelerini al\n    const urlParams = new URLSearchParams(window.location.search);\n    const messageType = urlParams.get('messageType');\n    const messageTitle = urlParams.get('messageTitle');\n    const messageText = urlParams.get('messageText');\n    \n    // Mesaj varsa göster\n    if (messageType && messageText) {\n      AuthHelpers.showNotification(messageType, messageTitle || 'Bilgi', messageText);\n      \n      // URL'i temizle\n      if (window.history.replaceState) {\n        window.history.replaceState(null, null, window.location.pathname);\n      }\n    }\n  }\n};\n\n// Register sayfası işlevleri\nconst Register = {\n  // Form alanlarının doğrulama durumunu takip etmek için değişkenler\n  formFields: {\n    name: false,\n    email: false,\n    phone: false\n  },\n  \n  init: function() {\n    console.log(\"Register page loaded\");\n    this.setupEventListeners();\n    \n    // CAPTCHA oluştur (başlangıçta gizli)\n    this.generateMathCaptcha();\n  },\n  \n  setupEventListeners: function() {\n    const self = this;\n    \n    // Form alanları değiştiğinde doğrulama yap\n    $('#inputName').on('input blur', function() {\n      const value = $(this).val();\n      const isValid = value.length >= 5;\n      self.formFields.name = isValid;\n      self.updateFieldValidation($(this), isValid);\n      self.checkAllFields();\n    });\n    \n    $('#inputEmailAddress').on('input blur', function() {\n      const value = $(this).val();\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      const isValid = emailRegex.test(value);\n      self.formFields.email = isValid;\n      self.updateFieldValidation($(this), isValid);\n      self.checkAllFields();\n    });\n    \n    $('#inputPhone').on('input blur', function() {\n      const value = $(this).val();\n      const phoneRegex = /^0[0-9 ]{10,14}$/;\n      const isValid = phoneRegex.test(value);\n      self.formFields.phone = isValid;\n      self.updateFieldValidation($(this), isValid);\n      self.checkAllFields();\n      \n      // Telefon numarası formatlama - Sadece başa 0 ekle\n      if (value.length > 0 && value.charAt(0) !== '0') {\n        $(this).val('0' + value);\n      }\n    });\n    \n    // Captcha alanı için doğrulama\n    $('#captchaAnswer').on('input blur', function() {\n      // Eğer captcha bölümü görünür değilse işlem yapma\n      if ($('#captchaSection').is(':hidden')) {\n        return;\n      }\n      \n      const answerVal = $(this).val().trim();\n      const expectedVal = $('#captchaExpected').val().trim();\n      \n      // Boş değer kontrolü\n      if (!answerVal) {\n        self.updateFieldValidation($(this), false);\n        return;\n      }\n      \n      // Sayısal değere dönüştür\n      const answer = parseInt(answerVal);\n      const expected = parseInt(expectedVal);\n      \n      console.log(\"Captcha kontrolü:\", { answer, expected, isValid: answer === expected });\n      \n      // Sayısal karşılaştırma yap\n      const isValid = !isNaN(answer) && !isNaN(expected) && answer === expected;\n      self.updateFieldValidation($(this), isValid);\n      \n      // Doğrulama başarılı olduğunda captcha değerini form gönderilene kadar sakla\n      if (isValid) {\n        $(this).data('validatedAnswer', answer);\n      }\n    });\n    \n    // Form gönderimi\n    $('#registerForm').on('submit', function(e) {\n      console.log(\"Register form submit\");\n      \n      // Form doğrulama - tüm alanları kontrol et\n      if (!self.checkAllFields(true)) {\n        e.preventDefault();\n        AuthHelpers.showNotification('warning', 'Uyarı', 'Lütfen tüm alanları doğru şekilde doldurun');\n        return false;\n      }\n      \n      // Captcha kontrolü - değerleri tekrar al\n      const captchaAnswerInput = $('#captchaAnswer');\n      const captchaExpectedInput = $('#captchaExpected');\n      \n      if (captchaAnswerInput.length && captchaExpectedInput.length) {\n        // Önce data-validatedAnswer'ı kontrol et (önceden doğrulanmış değer)\n        const validatedAnswer = captchaAnswerInput.data('validatedAnswer');\n        const captchaExpected = parseInt(captchaExpectedInput.val().trim());\n        \n        // Eğer daha önce doğrulanmış bir değer varsa ve bu değer beklenen değerle eşleşiyorsa\n        if (!isNaN(validatedAnswer) && !isNaN(captchaExpected) && validatedAnswer === captchaExpected) {\n          console.log(\"Form gönderilirken captcha kontrolü: Önceden doğrulanmış değer kullanılıyor\", { \n            validatedAnswer, \n            captchaExpected\n          });\n          return true; // Form gönderimi devam etsin\n        }\n        \n        // Önceden doğrulanmış değer yoksa veya eşleşmiyorsa, mevcut değeri kontrol et\n        const captchaAnswer = parseInt(captchaAnswerInput.val().trim());\n        \n        console.log(\"Form gönderilirken captcha kontrolü:\", { \n          captchaAnswer, \n          captchaExpected, \n          validatedAnswer,\n          rawAnswer: captchaAnswerInput.val(),\n          rawExpected: captchaExpectedInput.val()\n        });\n        \n        // Sayısal karşılaştırma yap\n        if (isNaN(captchaAnswer) || isNaN(captchaExpected) || captchaAnswer !== captchaExpected) {\n          e.preventDefault();\n          captchaAnswerInput.removeClass('is-valid').addClass('is-invalid');\n          AuthHelpers.showNotification('warning', 'Uyarı', 'Doğrulama kodunu doğru giriniz');\n          return false;\n        }\n      }\n    });\n    \n    // Captcha yenileme butonu\n    $('#refreshCaptcha').on('click', function() {\n      self.generateMathCaptcha();\n    });\n  },\n  \n  // Alan doğrulama durumunu güncelle\n  updateFieldValidation: function(field, isValid) {\n    if (isValid) {\n      field.removeClass('is-invalid').addClass('is-valid');\n    } else {\n      field.removeClass('is-valid').addClass('is-invalid');\n    }\n  },\n  \n  // Tüm alanların doğruluğunu kontrol et\n  checkAllFields: function(showNotification = false) {\n    const allValid = this.formFields.name && this.formFields.email && this.formFields.phone;\n    \n    // Tüm alanlar doğruysa captcha bölümünü göster\n    if (allValid) {\n      // Eğer captcha bölümü zaten görünür değilse göster ve yeni captcha oluştur\n      if ($('#captchaSection').is(':hidden')) {\n        $('#captchaSection').slideDown(300);\n        this.generateMathCaptcha();\n      }\n    } else {\n      $('#captchaSection').slideUp(300);\n    }\n    \n    if (showNotification && !allValid) {\n      // Hangi alanların eksik olduğunu belirle\n      let missingFields = [];\n      if (!this.formFields.name) missingFields.push(\"Ad Soyad\");\n      if (!this.formFields.email) missingFields.push(\"E-posta\");\n      if (!this.formFields.phone) missingFields.push(\"Telefon\");\n      \n      AuthHelpers.showNotification('warning', 'Eksik Bilgi', \n        'Lütfen şu alanları doğru şekilde doldurun: ' + missingFields.join(', '));\n    }\n    \n    return allValid;\n  },\n  \n  // CAPTCHA oluşturma fonksiyonu\n  generateMathCaptcha: function() {\n    const challengeElement = document.getElementById('captchaChallenge');\n    const answerElement = document.getElementById('captchaAnswer');\n    const expectedElement = document.getElementById('captchaExpected');\n    \n    if (!challengeElement || !answerElement || !expectedElement) return;\n    \n    // Rastgele 1-10 arası sayılar\n    const num1 = Math.floor(Math.random() * 10) + 1;\n    const num2 = Math.floor(Math.random() * 10) + 1;\n    \n    // Toplama/çıkarma işlemi (çıkarma işleminde negatif sonuç çıkmaması için kontrol)\n    let result, question;\n    const isAddition = Math.random() > 0.5;\n    \n    if (isAddition) {\n      result = num1 + num2;\n      question = `${num1} + ${num2} = ?`;\n    } else {\n      // Büyük sayıdan küçük sayıyı çıkar\n      if (num1 >= num2) {\n        result = num1 - num2;\n        question = `${num1} - ${num2} = ?`;\n      } else {\n        result = num2 - num1;\n        question = `${num2} - ${num1} = ?`;\n      }\n    }\n    \n    // Soruyu ekrana yaz\n    challengeElement.textContent = question;\n    \n    // Beklenen sonucu sakla\n    expectedElement.value = result.toString();\n    \n    // Cevap alanını sıfırla\n    answerElement.value = '';\n    answerElement.classList.remove('is-valid', 'is-invalid');\n    \n    // Önceden doğrulanmış değeri temizle\n    $(answerElement).removeData('validatedAnswer');\n    \n    console.log(\"Yeni captcha oluşturuldu:\", { question, result });\n  }\n};\n\n// Forgot Password sayfası işlevleri\nconst ForgotPassword = {\n  init: function() {\n    console.log(\"Forgot password page loaded\");\n    this.setupEventListeners();\n  },\n  \n  setupEventListeners: function() {\n    // Form gönderimi\n    $('#forgotPasswordForm').on('submit', function(e) {\n      console.log(\"Forgot password form submit\");\n      \n      // Form doğrulama\n      const email = $('#inputEmailAddress').val();\n      \n      if (!email) {\n        e.preventDefault();\n        AuthHelpers.showNotification('warning', 'Uyarı', 'Lütfen e-posta adresinizi girin');\n        return false;\n      }\n    });\n  }\n};\n\n// Sayfa yüklendiğinde doğru modülü başlat\n$(document).ready(function() {\n  // Sayfanın hangi auth sayfası olduğunu belirle\n  const pageId = $('body').data('page-id');\n  \n  switch(pageId) {\n    case 'login':\n      Login.init();\n      break;\n    case 'register':\n      Register.init();\n      break;\n    case 'forgot-password':\n      ForgotPassword.init();\n      break;\n    case 'reset-password':\n      ResetPassword.init();\n      break;\n  }\n}); "],"names":["AuthHelpers","containerId","passwordInput","$","icon","attr","removeClass","addClass","type","title","message","toastHtml","Date","now","toastContainer","length","append","toastElement","bootstrap","Toast","autohide","delay","show","setTimeout","remove","url","method","data","successCallback","errorCallback","ajax","headers","crossDomain","xhrFields","withCredentials","success","response","error","xhr","status","statusText","responseText","ResetPassword","tempPasswordVerified","verificationInProgress","init","this","tempPasswordInput","newPasswordSection","confirmPasswordSection","submitButtonSection","tempPasswordError","resetPasswordForm","val","window","history","replaceState","location","pathname","setupEventListeners","self","on","verifyTempPassword","event","preventDefault","e","text","password","confirmPassword","email","submitButton","originalText","prop","html","contentType","dataType","JSON","stringify","password_confirm","beforeSend","setRequestHeader","href","_xhr$responseJSON","responseJSON","tempPassword","temp_password","errorMessage","Login","showMessageFromURL","urlParams","URLSearchParams","search","messageType","get","messageTitle","messageText","Register","formFields","name","phone","generateMathCaptcha","isValid","updateFieldValidation","checkAllFields","value","test","charAt","is","answerVal","trim","expectedVal","answer","parseInt","expected","isNaN","captchaAnswerInput","captchaExpectedInput","validatedAnswer","captchaExpected","captchaAnswer","field","showNotification","allValid","slideDown","slideUp","missingFields","push","join","challengeElement","document","getElementById","answerElement","expectedElement","num1","Math","floor","random","num2","result","question","textContent","toString","classList","removeData","ForgotPassword","ready"],"sourceRoot":""}